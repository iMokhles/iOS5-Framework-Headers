/*
 *     Generated by class-dump 3.3.4 (64 bit).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2011 by Steve Nygard.
 */

#import "NSObject.h"

#import "CLLocationManagerDelegateInternal-Protocol.h"
#import "PBRequesterDelegate-Protocol.h"
#import "RadiosPreferencesDelegate-Protocol.h"

@class CLHeading, CLLocation, CLLocationManager, GEOLocation, GEOLocationShiftFunctionRequest, GEOLocationShiftFunctionResponse, MKTripRecorder, NSBundle, NSHashTable, NSMutableArray, NSString, NSTimer, RadiosPreferences;

@interface MKLocationManager : NSObject <CLLocationManagerDelegateInternal, PBRequesterDelegate, RadiosPreferencesDelegate>
{
    CLLocationManager *_clLocationManager;
    NSHashTable *_locationObservers;
    NSHashTable *_headingObservers;
    CLLocation *_lastLocation;
    double _lastLocationUpdateTime;
    BOOL _isLastLocationStale;
    BOOL _trackingLocation;
    BOOL _trackingHeading;
    BOOL _shouldThrottleHeading;
    NSString *_tripPath;
    NSMutableArray *_tripPaths;
    MKTripRecorder *_recorder;
    double _expectedTimeTillNextUpdate;
    double _calculatingLocationStartTime;
    double _userLocationCacheDuration;
    double _applicationResumeTime;
    double _applicationSuspendTime;
    double _headingUpdateTime;
    double _locationAccuracyUpdateTime;
    id _locationCorrecter;
    NSTimer *_coalesceTimer;
    double _lastLocationReportTime;
    BOOL _hasCheckedChinaShiftEnabled;
    BOOL _chinaShiftEnabled;
    GEOLocationShiftFunctionResponse *_shiftFunction;
    BOOL _isRequestingShiftFunction;
    CLLocation *_delayedLocationToShift;
    GEOLocationShiftFunctionRequest *_shiftRequest;
    int _shiftProvider;
    CLHeading *_throttledHeading;
    CLHeading *_heading;
    RadiosPreferences *_radiosPreferences;
    int _wiFiStatus;
    int _staleWiFiStatus;
    id _networkActivity;
    NSBundle *_effectiveBundle;
    int _authorizationStatus;
    BOOL _enabled;
    BOOL _corrected;
    BOOL _useCourseForHeading;
    BOOL _locationServicesPreferencesDialogEnabled;
}

+ (id)sharedLocationManager;
@property(nonatomic) BOOL useCourseForHeading; // @synthesize useCourseForHeading=_useCourseForHeading;
@property(nonatomic, getter=isEnabled) BOOL enabled; // @synthesize enabled=_enabled;
@property(nonatomic, getter=isCorrected) BOOL corrected; // @synthesize corrected=_corrected;
@property(copy, nonatomic) id locationCorrecter; // @synthesize locationCorrecter=_locationCorrecter;
@property(retain, nonatomic) GEOLocationShiftFunctionRequest *shiftRequest; // @synthesize shiftRequest=_shiftRequest;
@property(retain, nonatomic) CLLocation *delayedLocationToShift; // @synthesize delayedLocationToShift=_delayedLocationToShift;
@property(retain, nonatomic) GEOLocationShiftFunctionResponse *shiftFunction; // @synthesize shiftFunction=_shiftFunction;
@property(nonatomic) BOOL chinaShiftEnabled; // @synthesize chinaShiftEnabled=_chinaShiftEnabled;
@property(retain, nonatomic) CLHeading *throttledHeading; // @synthesize throttledHeading=_throttledHeading;
@property(readonly, nonatomic) CLHeading *heading; // @synthesize heading=_heading;
@property(nonatomic) BOOL shouldThrottleHeading; // @synthesize shouldThrottleHeading=_shouldThrottleHeading;
@property(copy, nonatomic) id networkActivity; // @synthesize networkActivity=_networkActivity;
@property(retain, nonatomic) NSMutableArray *tripPaths; // @synthesize tripPaths=_tripPaths;
@property(retain, nonatomic) NSString *tripPath; // @synthesize tripPath=_tripPath;
@property(nonatomic) double userLocationCacheDuration; // @synthesize userLocationCacheDuration=_userLocationCacheDuration;
@property(readonly, nonatomic) BOOL isLastLocationStale; // @synthesize isLastLocationStale=_isLastLocationStale;
@property(nonatomic) double expectedTimeTillNextUpdate; // @synthesize expectedTimeTillNextUpdate=_expectedTimeTillNextUpdate;
- (void)stopHeadingUpdateWithObserver:(id)arg1;
- (void)startHeadingUpdateWithObserver:(id)arg1;
- (void)_setTrackingHeading:(BOOL)arg1;
- (void)stopLocationUpdateWithObserver:(id)arg1;
- (void)startLocationUpdateWithObserver:(id)arg1;
- (void)listenForLocationUpdates:(id)arg1;
- (void)tripPlayerDidEnd:(id)arg1;
- (void)locationManager:(id)arg1 didChangeAuthorizationStatus:(int)arg2;
- (BOOL)locationManagerShouldDisplayHeadingCalibration:(id)arg1;
- (void)locationManager:(id)arg1 didUpdateHeading:(id)arg2;
- (void)locationManager:(id)arg1 didFailWithError:(id)arg2;
- (void)locationManager:(id)arg1 didUpdateToLocation:(id)arg2 fromLocation:(id)arg3;
- (id)_applyChinaLocationShift:(id)arg1;
- (void)requestShiftFunctionForLocation:(id)arg1 wrap:(BOOL)arg2;
- (void)dismissHeadingCalibrationDisplay;
- (void)dampenGPSLocationAccuracy:(id *)arg1 oldLocationSource:(int)arg2;
- (void)reportCoalescedUpdated;
- (void)_stopCoalescingUpdates;
- (void)_startCoalescingUpdates:(int)arg1;
- (BOOL)shouldStopCoalescingLocation:(id)arg1;
- (BOOL)shouldStartCoalescingLocation:(id)arg1;
- (BOOL)shouldCoalesceUpdates;
- (void)setCoalesceTimer:(id)arg1;
- (void)writeCoreLocationLog;
- (BOOL)displayCoreLocationStats;
@property(readonly, nonatomic, getter=isRecordingTrip) BOOL recordingTrip;
@property(readonly, nonatomic, getter=isPlayingTrip) BOOL playingTrip;
- (void)unloadRecording;
- (void)loadRecordings:(id)arg1;
- (void)loadRecording:(id)arg1;
- (void)writeRecordingToPath:(id)arg1;
- (void)writeRecording;
- (void)stopRecording;
- (void)startRecording;
@property(readonly, nonatomic) double expectedGpsUpdateInterval;
@property(nonatomic) double desiredAccuracy;
- (BOOL)isLocationServicesPossiblyAvailable:(id *)arg1;
- (void)_setTrackingLocation:(BOOL)arg1;
- (void)reset;
- (void)repostLastKnownLocation;
- (void)_reportHeadingFailureWithError:(id)arg1;
- (void)_reportHeadingSuccess;
- (void)_reportLocationReset;
- (void)_reportLocationSuccess;
- (void)_reportLocationFailureWithError:(id)arg1;
- (void)_reportLocationStatus:(SEL)arg1;
- (void)_countryProvidersDidChange:(id)arg1;
- (void)applicationDidEnterBackground:(id)arg1;
- (void)applicationWillResignActive:(id)arg1;
- (void)applicationDidBecomeActive:(id)arg1;
- (BOOL)_isTimeToResetOnResume;
@property(readonly, nonatomic) BOOL hasLocation;
- (void)setHeading:(id)arg1;
@property(nonatomic) int headingOrientation;
@property(readonly, nonatomic) GEOLocation *gridSnappedCurrentLocation;
@property(readonly, nonatomic) GEOLocation *currentLocation;
@property(readonly, nonatomic) double headingUpdateTimeInterval;
- (void)setLastLocation:(id)arg1;
@property(readonly, nonatomic) CLLocation *lastLocation;
@property(readonly, nonatomic) int lastLocationSource;
- (void)setClLocationManager:(id)arg1;
- (id)clLocationManager;
- (void)_createCLLocationManager;
@property(retain, nonatomic) NSBundle *effectiveBundle;
@property(nonatomic, getter=isLocationServicesPreferencesDialogEnabled) BOOL locationServicesPreferencesDialogEnabled;
- (void)wiFiStatusChanged:(id)arg1;
- (void)_updateWifiEnabled;
- (void)airplaneModeChanged;
- (id)_radiosPreferences;
@property(readonly, nonatomic) BOOL isAirplaneModeBlockingLocation;
@property(readonly, nonatomic) BOOL isHeadingServicesAvailable;
@property(readonly, nonatomic) BOOL isLocationServicesPossiblyAvailable;
@property(readonly, nonatomic) BOOL isLocationServicesAvailable;
@property(readonly, nonatomic) BOOL isLocationServicesRestricted;
@property(readonly, nonatomic) BOOL isLocationServicesDenied;
@property(readonly, nonatomic) BOOL isLocationServicesApproved;
- (int)_authorizationStatus;
- (void)_updateAuthorizationStatus;
@property(readonly, nonatomic) BOOL isWiFiEnabled;
@property(readonly, nonatomic) BOOL isLocationServicesEnabled;
- (id)init;

@end

