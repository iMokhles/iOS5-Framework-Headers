/*
 *     Generated by class-dump 3.3.4 (64 bit).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2011 by Steve Nygard.
 */

#import <CoreData/NSSQLConnection.h>

@class NSMutableDictionary, NSMutableSet, NSSQLEntity, NSSQLiteStatement, NSString;

@interface NSSQLiteConnection : NSSQLConnection
{
    struct sqlite3 *_db;
    struct sqlite3_stmt *_vmstatement;
    int _rowsProcessedCount;
    unsigned int _lastEntityKey;
    NSSQLEntity *_finalEntity;
    NSSQLEntity *_lastEntity;
    struct sqlite3_stmt *_fetchPKStatement;
    struct sqlite3_stmt *_updatePKStatement;
    NSSQLiteStatement *_beginStatement;
    NSSQLiteStatement *_commitStatement;
    NSSQLiteStatement *_rollbackStatement;
    NSMutableSet *_vmCachedStatements;
    NSMutableDictionary *_pragmaSettings;
    struct __CFDictionary *_cachedEntityUpdateStatements;
    double _timeOutOption;
    void *_extraBuffersForRegisteredFunctions[5];
    NSString *_dbPathRegisteredWithBackupd;
    long long _vacuumTracker;
    struct __sqliteConnectionFlags {
        unsigned int _readyToBind:1;
        unsigned int _fetchInProgress:1;
        unsigned int _fileSystemType:2;
        unsigned int _proxyLocking:1;
        unsigned int _vacuumSetupNeeded:1;
        unsigned int _reserved:26;
    } _sqliteConnectionFlags;
    unsigned long long _debugInode;
}

+ (void)_setDebugFlags:(int)arg1;
+ (void)initialize;
+ (void)__INode_Changed_AllThatIsLeftToUsIsHonor__;
+ (int)readMagicWordFromPath:(const char *)arg1;
+ (const char *)_databaseOpenURLStringForURL:(id)arg1;
+ (BOOL)_replacePersistentStoreAtURL:(id)arg1 destinationOptions:(id)arg2 withPersistentStoreFromURL:(id)arg3 sourceOptions:(id)arg4 error:(id *)arg5;
+ (BOOL)_destroyPersistentStoreAtURL:(id)arg1 options:(id)arg2 error:(id *)arg3;
- (id)initWithAdapter:(id)arg1;
- (void)dealloc;
- (void)finalize;
- (id)_adapter;
- (BOOL)isFetchInProgress;
- (void)_ensureDatabaseOpen;
- (void)_ensureNoStatementPrepared;
- (void)_ensureNoFetchInProgress;
- (void)_ensureNoTransactionOpen;
- (struct __CFArray *)rawIntegerRowsForSQL:(id)arg1;
- (long long)_fetchMaxPrimaryKeyForEntity:(id)arg1;
- (long long)fetchMaxPrimaryKeyForEntity:(id)arg1;
- (BOOL)canConnect;
- (BOOL)databaseIsEmpty;
- (void)_executeSQLString:(id)arg1;
- (void)_configureSynchronousMode;
- (void)_configureIntegrityCheck;
- (void)_configureUbiquityMetadataTable;
- (void)_configurePragmaOptions:(int)arg1;
- (void)connect;
- (void)_clearTransactionCaches;
- (void)_finalizeStatement;
- (void)_forceDisconnectOnError;
- (void)disconnect;
- (void)beginTransaction;
- (void)commitTransaction;
- (void)rollbackTransaction;
- (BOOL)isOpen;
- (int)_rowsChangedByLastExecute;
- (void)_bindVariablesWithInsertedRow:(id)arg1;
- (void)_clearBindVariablesForInsertedRow;
- (void)_bindVariablesWithUpdatedRow:(id)arg1 andOriginalRow:(id)arg2 forDeltasMask:(struct __CFBitVector *)arg3;
- (void)_clearBindVariablesForUpdateStatement:(id)arg1 forDeltasMask:(struct __CFBitVector *)arg2;
- (void)_bindVariablesWithDeletedRow:(id)arg1;
- (void)insertRow:(id)arg1;
- (void)insertCorrelation:(id)arg1;
- (void)updateCorrelation:(id)arg1;
- (void)deleteCorrelation:(id)arg1;
- (void)cacheUpdateStatement:(id)arg1 forEntity:(id)arg2 andDeltasMask:(struct __CFBitVector *)arg3;
- (id)cachedUpdateStatementForEntity:(id)arg1 andDeltasMask:(struct __CFBitVector *)arg2;
- (void)updateRow:(id)arg1;
- (void)deleteRow:(id)arg1;
- (void)prepareSQLStatement:(id)arg1;
- (void)execute;
- (void)resetSQLStatement;
- (void)releaseSQLStatement;
- (void)_clearOtherStatements;
- (void)_clearCachedStatements;
- (id)describeResults;
- (id)_newValueForColumn:(id)arg1 atIndex:(unsigned int)arg2 inStatement:(struct sqlite3_stmt *)arg3;
- (id)newFetchedArray;
- (void)cacheCurrentDBStatementOn:(id)arg1;
- (void)handleCorruptedDB:(id)arg1;
- (int)fetchResultSet:(void *)arg1 usingFetchPlan:(id)arg2;
- (void)setExclusiveLockingMode:(BOOL)arg1;
- (void)endFetch;
- (struct sqlite3_stmt *)_vmstatement;
- (BOOL)performIntegrityCheck;
- (id)fetchTableNames;
- (id)fetchTableCreationSQL;
- (BOOL)_hasTableWithName:(id)arg1;
- (BOOL)hasMetadataTable;
- (void)_registerExtraFunctions;
- (void)prepareForPrimaryKeyGeneration;
- (void)endPrimaryKeyGeneration;
- (long long)generatePrimaryKeysForEntity:(id)arg1 batch:(unsigned int)arg2;
- (BOOL)hasPrimaryKeyTable;
- (void)_configureAutoVacuum;
- (void)_configurePageSize;
- (void)willCreateSchema;
- (void **)_buffersForRegisteredFunctions;
- (void)_performPostSaveTasks;
- (long long)_getCurrentAutoVacuumValue;
- (void)_setupVacuumIfNecessary;
- (BOOL)isLocalFS;
- (id)fetchUbiqiutyKnowledgeVector;
- (void)updateUbiquityKnowledgeVector:(id)arg1;
- (void)updateUbiquityKnowledgeForPeerWithID:(id)arg1 andTransactionNumber:(id)arg2;
- (void)addPeerRangeForPeerID:(id)arg1 entityName:(id)arg2 rangeStart:(id)arg3 rangeEnd:(id)arg4 peerRangeStart:(id)arg5 peerRangeEnd:(id)arg6;
- (id)allPeerRanges;
- (id)createMapOfEntityNameToPKMaxForEntitiesFromPKTable:(id)arg1;
- (id)createMapOfEntityNameToPKMaxForEntitiesFromUBRangeTable:(id)arg1;
- (id)createMapOfEntityNameToPKMaxForEntities:(id)arg1;
- (void)setUbiquityTableValue:(id)arg1 forKey:(id)arg2;
- (id)ubiquityTableKeysAndValues;
- (id)ubiquityTableValueForKey:(id)arg1;

@end

