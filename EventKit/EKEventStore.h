/*
 *     Generated by class-dump 3.3.4 (64 bit).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2011 by Steve Nygard.
 */

#import "NSObject.h"

@class EKCalendar, EKDaemonConnection, NSArray, NSMutableDictionary, NSMutableSet, NSNumber, NSString, NSTimeZone;

@interface EKEventStore : NSObject
{
    NSMutableDictionary *_registeredObjects;
    NSMutableDictionary *_publicRegisteredObjects;
    NSMutableSet *_insertedObjects;
    NSMutableSet *_deletedObjects;
    NSMutableSet *_updatedObjects;
    NSNumber *_defaultTimedAlarmOffset;
    NSNumber *_defaultAllDayAlarmOffset;
    EKDaemonConnection *_database;
    unsigned long _flags;
    NSTimeZone *_timeZone;
    NSMutableDictionary *_calendars;
    NSMutableDictionary *_sources;
    NSMutableSet *_objectsPendingCommit;
    struct dispatch_queue_s *_calendarQueue;
    struct dispatch_queue_s *_registeredQueue;
    struct dispatch_queue_s *_unsavedChangesQueue;
    struct dispatch_queue_s *_dbChangedQueue;
}

+ (Class)publicClassForEntityName:(id)arg1;
+ (Class)classForEntityName:(id)arg1;
+ (id)storeWithOptions:(unsigned long)arg1 path:(id)arg2;
@property(nonatomic) struct dispatch_queue_s *dbChangedQueue; // @synthesize dbChangedQueue=_dbChangedQueue;
@property(nonatomic) struct dispatch_queue_s *unsavedChangesQueue; // @synthesize unsavedChangesQueue=_unsavedChangesQueue;
@property(nonatomic) struct dispatch_queue_s *registeredQueue; // @synthesize registeredQueue=_registeredQueue;
@property(nonatomic) struct dispatch_queue_s *calendarQueue; // @synthesize calendarQueue=_calendarQueue;
@property(nonatomic) NSMutableSet *objectsPendingCommit; // @synthesize objectsPendingCommit=_objectsPendingCommit;
@property(retain, nonatomic) NSMutableDictionary *_sources; // @synthesize _sources;
@property(retain, nonatomic) NSMutableDictionary *_calendars; // @synthesize _calendars;
@property(nonatomic) unsigned long flags; // @synthesize flags=_flags;
@property(retain, nonatomic) EKDaemonConnection *database; // @synthesize database=_database;
@property(nonatomic) NSMutableSet *updatedObjects; // @synthesize updatedObjects=_updatedObjects;
@property(nonatomic) NSMutableSet *deletedObjects; // @synthesize deletedObjects=_deletedObjects;
@property(nonatomic) NSMutableSet *insertedObjects; // @synthesize insertedObjects=_insertedObjects;
@property(nonatomic) NSMutableDictionary *publicRegisteredObjects; // @synthesize publicRegisteredObjects=_publicRegisteredObjects;
@property(nonatomic) NSMutableDictionary *registeredObjects; // @synthesize registeredObjects=_registeredObjects;
- (id)defaultAllDayAlarm;
@property(retain, nonatomic) NSNumber *defaultAllDayAlarmOffset; // @synthesize defaultAllDayAlarmOffset=_defaultAllDayAlarmOffset;
- (id)defaultTimedAlarm;
@property(retain, nonatomic) NSNumber *defaultTimedAlarmOffset; // @synthesize defaultTimedAlarmOffset=_defaultTimedAlarmOffset;
- (BOOL)isDataProtected;
- (void)_protectedDataDidBecomeAvailable;
- (void)_protectedDataWillBecomeUnavailable;
- (id)predicateForUpcomingEventsWithLimit:(int)arg1;
- (id)predicateForUnalertedEvents;
- (id)predicateForUnacknowledgedEvents;
- (id)predicateForEventsWithStartDate:(id)arg1 endDate:(id)arg2 eventUUID:(id)arg3 calendars:(id)arg4;
- (id)predicateForEventsWithStartDate:(id)arg1 endDate:(id)arg2 calendars:(id)arg3;
- (void)locationBasedAlarmOccurrencesWithCompletion:(id)arg1;
- (void)alarmOccurrencesBetweenStartDate:(id)arg1 endDate:(id)arg2 completion:(id)arg3;
- (id)alarmWithUUID:(id)arg1;
- (void)cancelFetchRequest:(id)arg1;
- (id)fetchEventsMatchingPredicate:(id)arg1 resultHandler:(id)arg2;
- (void)enumerateEventsMatchingPredicate:(id)arg1 usingBlock:(id)arg2;
- (id)eventsMatchingPredicate:(id)arg1;
- (BOOL)commit:(id *)arg1;
- (void)reset;
- (void)rollback;
- (void)_deleteObject:(id)arg1;
- (void)_insertObject:(id)arg1;
- (void)_trackModifiedObject:(id)arg1;
- (id)publicObjectWithObjectID:(id)arg1;
- (id)publicObjectWithPersistentObject:(id)arg1;
- (id)objectWithObjectID:(id)arg1;
- (id)registerFetchedObjectWithID:(id)arg1;
- (id)_addFetchedObjectWithID:(id)arg1;
- (void)_forgetRegisteredObjects;
- (void)_reregisterObject:(id)arg1 oldID:(id)arg2;
- (void)_unregisterObject:(id)arg1;
- (void)_registerObject:(id)arg1;
- (void)_registerObjectImmediate:(id)arg1;
- (void)refreshSourcesIfNecessary;
- (void)refreshSourcesIfNecessary:(BOOL)arg1;
- (void)_refreshSource:(id)arg1 accountsManager:(id)arg2 isUserRequested:(BOOL)arg3;
- (void)_refreshCalendar:(id)arg1 accountsManager:(id)arg2 isUserRequested:(BOOL)arg3;
- (id)earliestExpiringUnreadEventEndDateAfterDate:(id)arg1 timeZone:(id)arg2;
- (int)unacknowledgedEventCount;
- (int)unreadEventCount;
- (id)insertNewExceptionDateWithDate:(id)arg1;
- (id)insertNewEvent;
- (id)calendarWithExternalURI:(id)arg1;
- (id)calendarWithIdentifier:(id)arg1;
- (id)eventWithUUID:(id)arg1;
- (id)predicateForRemindersWithTitle:(id)arg1 listTitle:(id)arg2 limitToCompletedOrIncomplete:(BOOL)arg3 completed:(BOOL)arg4 dueAfter:(id)arg5 dueBefore:(id)arg6 searchTerm:(id)arg7 sortOrder:(int)arg8;
- (id)predicateForRemindersWithSearchTerm:(id)arg1;
- (id)predicateForCompletedRemindersWithCalendars:(id)arg1;
- (id)predicateForRemindersWithTitle:(id)arg1 calendars:(id)arg2;
- (id)predicateForAllRemindersDueBeforeOrOnDueDate:(id)arg1 calendars:(id)arg2;
- (id)predicateForAllRemindersWithDueDate:(id)arg1 calendars:(id)arg2;
- (id)predicateForCompletedRemindersWithDueDateOrCompletionDate:(id)arg1 calendars:(id)arg2 sortOrder:(int)arg3;
- (id)predicateForCompletedRemindersWithDueDate:(id)arg1 calendars:(id)arg2 sortOrder:(int)arg3;
- (id)predicateForIncompleteRemindersDueBeforeOrOnDueDate:(id)arg1 calendars:(id)arg2;
- (id)predicateForIncompleteRemindersWithDueDate:(id)arg1 calendars:(id)arg2;
- (id)_predicateForRemindersWithDate:(id)arg1 useAsCompletionDate:(BOOL)arg2 calendars:(id)arg3 limitToCompletedOrIncomplete:(BOOL)arg4 completed:(BOOL)arg5 includeDatesBefore:(BOOL)arg6 sortOrder:(int)arg7;
- (void)fetchRemindersMatchingPredicate:(id)arg1 completion:(id)arg2;
- (int)countOfRemindersMatchingPredicate:(id)arg1;
- (id)remindersMatchingPredicate:(id)arg1;
- (id)insertNewReminder;
- (id)reminderWithUUID:(id)arg1;
- (id)reminderWithExternalURI:(id)arg1;
- (BOOL)removeReminder:(id)arg1 commit:(BOOL)arg2 error:(id *)arg3;
- (BOOL)removeReminder:(id)arg1 error:(id *)arg2;
- (BOOL)saveReminder:(id)arg1 commit:(BOOL)arg2 error:(id *)arg3;
- (BOOL)saveReminder:(id)arg1 error:(id *)arg2;
- (void)setDefaultCalendarForNewTasks:(id)arg1;
- (id)defaultCalendarForNewTasks;
- (void)setDefaultCalendarForNewEvents:(id)arg1;
@property(readonly, nonatomic) EKCalendar *defaultCalendarForNewEvents;
- (struct CGColor *)copyCGColorForNewCalendar;
- (id)importICSData:(id)arg1 intoCalendar:(id)arg2 options:(unsigned int)arg3;
- (void)importICSData:(id)arg1 intoCalendar:(id)arg2 options:(unsigned int)arg3 completion:(id)arg4;
- (void)_performServerFunction:(id)arg1 replyHandler:(void)arg2;
- (id)importICS:(id)arg1 intoCalendar:(id)arg2 options:(unsigned int)arg3;
- (void)setEventsAlertedAndSave:(id)arg1;
- (BOOL)markEventsRead:(id)arg1 error:(id *)arg2;
- (BOOL)markEventRead:(id)arg1 error:(id *)arg2;
- (BOOL)removeEvent:(id)arg1 span:(int)arg2 commit:(BOOL)arg3 error:(id *)arg4;
- (BOOL)saveEvent:(id)arg1 span:(int)arg2 commit:(BOOL)arg3 error:(id *)arg4;
- (BOOL)removeEvent:(id)arg1 span:(int)arg2 error:(id *)arg3;
- (BOOL)saveEvent:(id)arg1 span:(int)arg2 error:(id *)arg3;
- (id)eventWithUniqueId:(id)arg1;
- (id)eventForUID:(id)arg1 occurrenceDate:(id)arg2;
- (id)_eventWithURI:(id)arg1 checkValid:(BOOL)arg2;
- (BOOL)_parseURI:(id)arg1 expectedScheme:(id)arg2 identifier:(id *)arg3 options:(id *)arg4;
- (id)eventWithIdentifier:(id)arg1;
- (BOOL)deleteCalendar:(id)arg1 forEntityType:(int)arg2 error:(id *)arg3;
- (BOOL)removeCalendar:(id)arg1 commit:(BOOL)arg2 error:(id *)arg3;
- (BOOL)saveCalendar:(id)arg1 commit:(BOOL)arg2 error:(id *)arg3;
- (BOOL)removeCalendar:(id)arg1 error:(id *)arg2;
- (BOOL)saveCalendar:(id)arg1 error:(id *)arg2;
- (void)_addObjectToPendingCommits:(id)arg1;
- (id)calendarWithID:(id)arg1;
- (id)readWriteCalendarsForEntityType:(int)arg1;
- (int)readWriteCalendarCountForEntityType:(int)arg1;
- (BOOL)_calendar:(id)arg1 supportsEntityType:(int)arg2;
- (id)_allCalendars;
@property(readonly, nonatomic) NSArray *calendars;
- (BOOL)removeSource:(id)arg1 error:(id *)arg2;
- (BOOL)saveSource:(id)arg1 error:(id *)arg2;
- (id)sourceWithIdentifier:(id)arg1;
- (id)localSource;
- (id)sources;
- (void)_notifyStoreChanged;
- (void)_save;
- (void)_saveWithNotify:(BOOL)arg1;
@property(readonly, nonatomic) NSString *eventStoreIdentifier;
- (void)daemonRestarted;
- (void)_databaseChangedExternally;
- (void)_validateObjectIDs:(id)arg1 completion:(id)arg2;
- (id)changesSinceSequenceNumber:(int)arg1;
- (int)sequenceNumber;
- (id)connection;
- (unsigned int)serverPort;
@property(copy, nonatomic) NSTimeZone *timeZone; // @synthesize timeZone=_timeZone;
- (void)dealloc;
- (oneway void)release;
- (id)initWithOptions:(unsigned long)arg1 path:(id)arg2;
- (id)init;

@end

