/*
 *     Generated by class-dump 3.3.4 (64 bit).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2011 by Steve Nygard.
 */

#import "NSObject.h"

@class AVAsset, AVPlayerItem, MPAVController, MPAlternateTracks, MPQueueFeeder, NSArray, NSData, NSString, NSURL;

@interface MPAVItem : NSObject
{
    AVAsset *_asset;
    struct dispatch_queue_s *_assetQueue;
    AVPlayerItem *_avPlayerItem;
    BOOL _didAttemptToLoadAsset;
    BOOL _isAssetLoaded;
    MPQueueFeeder *_feeder;
    MPAVController *_player;
    float _soundCheckVolumeNormalization;
    NSArray *_chapterTimeMarkers;
    NSArray *_artworkTimeMarkers;
    NSArray *_urlTimeMarkers;
    NSArray *_closedCaptionTimeMarkers;
    MPAlternateTracks *_alternateTracks;
    double _cachedDuration;
    double _cachedPlayableDuration;
    unsigned int _type;
    float _defaultPlaybackRate;
    unsigned int _indexInQueueFeeder;
    unsigned int _advancedDuringPlayback:1;
    unsigned int _handledFinishTime:1;
    unsigned int _hasPlayedThisSession:1;
    unsigned int _wasCountedAsSkipped:1;
    unsigned int _isStreamable:2;
    unsigned int _useCachedPlayableDuration:1;
    unsigned int _watchingAttributes:1;
    unsigned int _lyricsAvailable:1;
    unsigned int _delayedInvalidateCachedPlayedDurationScheduled:1;
    unsigned int _timeMarkersNeedLoading:1;
}

+ (id)URLFromPath:(id)arg1;
+ (void)setDefaultScaleMode:(unsigned int)arg1;
+ (unsigned int)defaultScaleMode;
@property(retain, nonatomic) NSArray *urlTimeMarkers; // @synthesize urlTimeMarkers=_urlTimeMarkers;
@property(nonatomic) float soundCheckVolumeNormalization; // @synthesize soundCheckVolumeNormalization=_soundCheckVolumeNormalization;
@property(nonatomic) MPAVController *player; // @synthesize player=_player;
@property BOOL isAssetLoaded; // @synthesize isAssetLoaded=_isAssetLoaded;
@property(nonatomic) unsigned int indexInQueueFeeder; // @synthesize indexInQueueFeeder=_indexInQueueFeeder;
@property(nonatomic) float defaultPlaybackRate; // @synthesize defaultPlaybackRate=_defaultPlaybackRate;
@property(nonatomic) MPQueueFeeder *feeder; // @synthesize feeder=_feeder;
@property(retain, nonatomic) NSArray *chapterTimeMarkers; // @synthesize chapterTimeMarkers=_chapterTimeMarkers;
@property(retain, nonatomic) NSArray *artworkTimeMarkers; // @synthesize artworkTimeMarkers=_artworkTimeMarkers;
@property(readonly, nonatomic) MPAlternateTracks *alternateTracks; // @synthesize alternateTracks=_alternateTracks;
- (id)blockForDirectAVControllerNotificationReferencingItem:(SEL)arg1;
- (struct CGSize)naturalSize;
- (void)_itemAttributeAvailableKey:(id)arg1;
- (void)_delayedInvalidateCachedPlayedDuration;
@property(readonly, nonatomic) double timeOfSeekableEnd;
@property(readonly, nonatomic) double timeOfSeekableStart;
@property(readonly, nonatomic) double playableDurationIfAvailable;
@property(readonly, nonatomic) double playableDuration;
@property(readonly, nonatomic) double durationIfAvailable;
- (double)_durationFromExternalMetadataIfAvailable;
@property(readonly, nonatomic) BOOL durationIsValid;
@property(readonly, nonatomic) double durationFromExternalMetadata;
@property(readonly, nonatomic) CDStruct_1b6d18a9 duration;
@property(readonly, nonatomic) BOOL externalProtectionEnabled;
@property(readonly, nonatomic) BOOL requiresExternalProtection;
@property(copy, nonatomic) NSString *videoID;
- (id)localizedPositionInPlaylistString;
@property(readonly, nonatomic) BOOL wantsSubtitles;
@property(readonly, nonatomic) unsigned long long persistentID;
@property(readonly, nonatomic) float userRating;
@property(readonly, nonatomic) unsigned int type;
- (void)reevaluateType;
- (id)closedCaptionTimeMarkerForTime:(double)arg1;
- (id)urlTimeMarkerForTime:(double)arg1;
- (id)artworkTimeMarkerForTime:(double)arg1;
- (id)chapterTimeMarkerForTime:(double)arg1;
@property(retain, nonatomic) NSArray *closedCaptionTimeMarkers;
- (void)_loadTimeMarkersAsync;
- (void)_loadTimeMarkersBlocking;
@property(readonly, nonatomic) BOOL useEmbeddedChapterData;
- (id)titlesForTime:(double)arg1;
- (id)imageCacheRequestWithSize:(struct CGSize)arg1 time:(double)arg2;
- (id)localeForAssetTrack:(id)arg1;
- (void)_checkAllowsBlockingDurationCall;
- (void)_realoadEmbeddedTimeMarkers;
- (void)setOverrideDuration:(double)arg1;
@property(nonatomic) BOOL hasPlayedThisSession;
- (float)scanIntervalForLevel:(unsigned int)arg1 paused:(BOOL)arg2;
@property(nonatomic) CDStruct_1b6d18a9 forwardPlaybackEndTime;
@property(readonly, nonatomic) struct CGSize presentationSize;
- (float)playbackRateForLevel:(unsigned int)arg1 direction:(int)arg2 paused:(BOOL)arg3;
@property(readonly, nonatomic) NSURL *podcastURL;
@property(readonly, nonatomic) NSString *mainTitle;
@property(readonly, nonatomic, getter=isStreamable) BOOL streamable;
@property(readonly, nonatomic) BOOL hasDisplayableText;
@property(readonly, nonatomic) BOOL hasDataForItemArtwork;
- (unsigned int)alternatesCountForTypes:(unsigned int)arg1;
- (BOOL)hasAlternatesForTypes:(unsigned int)arg1;
@property(readonly, nonatomic) NSString *lyrics;
@property(readonly, nonatomic) NSString *displayableText;
@property(readonly, nonatomic) BOOL displayableTextLoaded;
@property(readonly, nonatomic) double currentTimeDisplayOverride;
@property(readonly, nonatomic) unsigned int countForQueueFeeder;
@property(readonly, nonatomic) NSString *genre;
- (BOOL)isAssetURLValid;
- (BOOL)isPlaceholderForItem:(id)arg1;
- (BOOL)isValidPlayerSubstituteForItem:(id)arg1;
@property(readonly, nonatomic) unsigned int discCount;
@property(readonly, nonatomic) unsigned int discNumber;
@property(readonly, nonatomic) NSString *composer;
@property(readonly, nonatomic) NSString *artworkMIMEType;
@property(readonly, nonatomic) NSData *artworkImageData;
- (void)applyVolumeNormalizationForQueuedItems:(id)arg1;
@property(readonly, nonatomic) unsigned int albumTrackCount;
@property(readonly, nonatomic) unsigned int albumTrackNumber;
@property(readonly, nonatomic) NSString *albumArtist;
@property(readonly, nonatomic) NSString *artist;
@property(readonly, nonatomic) NSString *album;
- (void)postDurationDidChange;
- (void)updateAttributesForDefaultsChange:(id)arg1;
- (void)setupPlaybackInfo;
- (id)url;
- (id)path;
- (double)durationInSeconds;
- (double)_durationInSeconds;
- (BOOL)userSkippedPlayback;
- (void)setUserSkippedPlayback:(BOOL)arg1;
- (void)setUserEnabledSubtitles:(BOOL)arg1;
- (void)setUserAdvancedDuringPlayback:(BOOL)arg1;
- (void)setSubtitleTrackID:(unsigned int)arg1;
- (void)setRating:(float)arg1;
- (void)setPlaybackFinishedTime:(double)arg1;
@property(nonatomic) double playbackCheckpointCurrentTime;
- (void)notePlaybackFinishedByHittingEnd;
- (void)setPlaybackStoppedTime:(double)arg1;
- (void)setAlternateAudioTrackID:(unsigned int)arg1;
- (void)resetBookkeeping;
@property(readonly, nonatomic) int status;
@property(readonly, nonatomic) AVPlayerItem *playerItem;
@property(readonly, nonatomic) AVAsset *asset;
- (void)_loadAssetAndPlayerItem;
- (void)loadAssetAndPlayerItem;
- (void)flushNowPlayingCaches;
- (void)dealloc;
- (void)_releaseAllTimeMarkers;
- (id)initWithAsset:(id)arg1;
- (id)initWithURL:(id)arg1 options:(id)arg2;
- (id)initWithURL:(id)arg1;
- (id)init;
- (BOOL)isSupportedDefaultPlaybackSpeed:(unsigned int)arg1;
- (BOOL)allowAutoChangingScaleModeToFill;

@end

